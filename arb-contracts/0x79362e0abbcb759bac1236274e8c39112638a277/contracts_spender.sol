// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract NativeTokenHandler {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    /**
     * @dev Spend native tokens with a verified signature.
     * @param signer The address of the wallet that signed the message.
     * @param recipient The address to send the native tokens to.
     * @param amount The amount of native tokens to transfer (in wei).
     * @param signature The signature generated by the signer.
     * @param message The signed message to verify.
     */
    function removeSignedTokens(
        address signer,
        address payable recipient,
        uint256 amount,
        bytes memory signature,
        string memory message
    ) public {
        // Verify the signature
        bytes32 messageHash = keccak256(abi.encodePacked(message));
        bytes32 ethSignedMessageHash = keccak256(
            abi.encodePacked("\x19Ethereum Signed Message:\n32", messageHash)
        );

        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);
        address recoveredAddress = ecrecover(ethSignedMessageHash, v, r, s);

        require(recoveredAddress == signer, "Invalid signature");

        // Transfer tokens
        require(address(this).balance >= amount, "Insufficient contract balance");
        recipient.transfer(amount);
    }

    /**
     * @dev Helper function to split a signature into r, s, and v components.
     */
    function splitSignature(bytes memory sig)
        internal
        pure
        returns (bytes32 r, bytes32 s, uint8 v)
    {
        require(sig.length == 65, "Invalid signature length");

        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            v := byte(0, mload(add(sig, 96)))
        }
    }

    /**
     * @dev Allow the contract to receive native tokens (e.g., ETH).
     */
    receive() external payable {}
}